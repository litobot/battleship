# add requires


it 'clones @cells hash for Computer' do

  expects(game.cpu_board).to eq(@cells)
end

it 'clones @cells hash for Player' do

  expects(game.cpu_player).to eq(@cells)
end

it 'fires a shot for CPU' do
  expect(shots_fired_cpu).to eq([])

  # Is this how I check if the generated shot equals what's recorded in #shots_fired_cpu?
  expect(board_cells.sample(1)).to eq([shots_fired_cpu])
  expect(shots_fired_cpu).to eq([])
end


describe '#shots_fired' do

    # How are we going to collect the shots fired by:
      # CPU     - randomly generated
      # Player  - user input
      
  it 'prevents cpu repeat shots' do
    # Shots not valid if present in shots_fired_cpu array.
    # Compares proposed shot against array.

    # 

    # expect(generated random shots).to eq([shot fired, shot fired, etc.])
  end
  
  it 'prevents player repeat shots' do
    # Shots not valid if present in shots_fired_player array.
    # Compares proposed shot against array.
    

    # expect(user input shots).to eq([shot fired, shot fired, etc.])
  end

  it 'populates #shots_fired_cpu array with fired upon cells' do
    # Shot coordinates generated by ship placement methods sent to #shots_fired_cpu array
    
    expect(board.shots_fired_cpu).to eq # ([CPU shot, CPU shot, etc.])
  end
  
  it 'populates #shots_fired_player array with fired upon cells' do
  # Shot coordinates generated by ship placement methods sent to #shots_fired_player array
  
    expect(board.shots_fired_player).to eq # ([Player shot, Player shot, etc.])
  end
  

  it 'empties #shots_fired_cpu array at Game Over' do

    expect(shots_fired_cpu).to eq([])
  end
  
  it 'empties #shots_fired_player array at Game Over' do
  
    expect(shots_fired_player).to eq([])
  end
end